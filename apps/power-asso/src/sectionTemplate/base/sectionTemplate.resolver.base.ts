/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SectionTemplate } from "./SectionTemplate";
import { SectionTemplateCountArgs } from "./SectionTemplateCountArgs";
import { SectionTemplateFindManyArgs } from "./SectionTemplateFindManyArgs";
import { SectionTemplateFindUniqueArgs } from "./SectionTemplateFindUniqueArgs";
import { CreateSectionTemplateArgs } from "./CreateSectionTemplateArgs";
import { UpdateSectionTemplateArgs } from "./UpdateSectionTemplateArgs";
import { DeleteSectionTemplateArgs } from "./DeleteSectionTemplateArgs";
import { PageSectionFindManyArgs } from "../../pageSection/base/PageSectionFindManyArgs";
import { PageSection } from "../../pageSection/base/PageSection";
import { SectionTemplateService } from "../sectionTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SectionTemplate)
export class SectionTemplateResolverBase {
  constructor(
    protected readonly service: SectionTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SectionTemplate",
    action: "read",
    possession: "any",
  })
  async _sectionTemplatesMeta(
    @graphql.Args() args: SectionTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SectionTemplate])
  @nestAccessControl.UseRoles({
    resource: "SectionTemplate",
    action: "read",
    possession: "any",
  })
  async sectionTemplates(
    @graphql.Args() args: SectionTemplateFindManyArgs
  ): Promise<SectionTemplate[]> {
    return this.service.sectionTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SectionTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SectionTemplate",
    action: "read",
    possession: "own",
  })
  async sectionTemplate(
    @graphql.Args() args: SectionTemplateFindUniqueArgs
  ): Promise<SectionTemplate | null> {
    const result = await this.service.sectionTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SectionTemplate)
  @nestAccessControl.UseRoles({
    resource: "SectionTemplate",
    action: "create",
    possession: "any",
  })
  async createSectionTemplate(
    @graphql.Args() args: CreateSectionTemplateArgs
  ): Promise<SectionTemplate> {
    return await this.service.createSectionTemplate({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SectionTemplate)
  @nestAccessControl.UseRoles({
    resource: "SectionTemplate",
    action: "update",
    possession: "any",
  })
  async updateSectionTemplate(
    @graphql.Args() args: UpdateSectionTemplateArgs
  ): Promise<SectionTemplate | null> {
    try {
      return await this.service.updateSectionTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SectionTemplate)
  @nestAccessControl.UseRoles({
    resource: "SectionTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteSectionTemplate(
    @graphql.Args() args: DeleteSectionTemplateArgs
  ): Promise<SectionTemplate | null> {
    try {
      return await this.service.deleteSectionTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PageSection], { name: "sections" })
  @nestAccessControl.UseRoles({
    resource: "PageSection",
    action: "read",
    possession: "any",
  })
  async findSections(
    @graphql.Parent() parent: SectionTemplate,
    @graphql.Args() args: PageSectionFindManyArgs
  ): Promise<PageSection[]> {
    const results = await this.service.findSections(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
