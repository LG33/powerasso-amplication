/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SectionTemplate, // @ts-ignore
  PageSection,
} from "@prisma/client";

export class SectionTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SectionTemplateCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SectionTemplateCountArgs>
  ): Promise<number> {
    return this.prisma.sectionTemplate.count(args);
  }

  async sectionTemplates<T extends Prisma.SectionTemplateFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SectionTemplateFindManyArgs>
  ): Promise<SectionTemplate[]> {
    return this.prisma.sectionTemplate.findMany(args);
  }
  async sectionTemplate<T extends Prisma.SectionTemplateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SectionTemplateFindUniqueArgs>
  ): Promise<SectionTemplate | null> {
    return this.prisma.sectionTemplate.findUnique(args);
  }
  async createSectionTemplate<T extends Prisma.SectionTemplateCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SectionTemplateCreateArgs>
  ): Promise<SectionTemplate> {
    return this.prisma.sectionTemplate.create<T>(args);
  }
  async updateSectionTemplate<T extends Prisma.SectionTemplateUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SectionTemplateUpdateArgs>
  ): Promise<SectionTemplate> {
    return this.prisma.sectionTemplate.update<T>(args);
  }
  async deleteSectionTemplate<T extends Prisma.SectionTemplateDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SectionTemplateDeleteArgs>
  ): Promise<SectionTemplate> {
    return this.prisma.sectionTemplate.delete(args);
  }

  async findSections(
    parentId: string,
    args: Prisma.PageSectionFindManyArgs
  ): Promise<PageSection[]> {
    return this.prisma.sectionTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sections(args);
  }
}
