/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PageSection } from "./PageSection";
import { PageSectionCountArgs } from "./PageSectionCountArgs";
import { PageSectionFindManyArgs } from "./PageSectionFindManyArgs";
import { PageSectionFindUniqueArgs } from "./PageSectionFindUniqueArgs";
import { CreatePageSectionArgs } from "./CreatePageSectionArgs";
import { UpdatePageSectionArgs } from "./UpdatePageSectionArgs";
import { DeletePageSectionArgs } from "./DeletePageSectionArgs";
import { Page } from "../../page/base/Page";
import { SectionTemplate } from "../../sectionTemplate/base/SectionTemplate";
import { PageSectionService } from "../pageSection.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PageSection)
export class PageSectionResolverBase {
  constructor(
    protected readonly service: PageSectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PageSection",
    action: "read",
    possession: "any",
  })
  async _pageSectionsMeta(
    @graphql.Args() args: PageSectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PageSection])
  @nestAccessControl.UseRoles({
    resource: "PageSection",
    action: "read",
    possession: "any",
  })
  async pageSections(
    @graphql.Args() args: PageSectionFindManyArgs
  ): Promise<PageSection[]> {
    return this.service.pageSections(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PageSection, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PageSection",
    action: "read",
    possession: "own",
  })
  async pageSection(
    @graphql.Args() args: PageSectionFindUniqueArgs
  ): Promise<PageSection | null> {
    const result = await this.service.pageSection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PageSection)
  @nestAccessControl.UseRoles({
    resource: "PageSection",
    action: "create",
    possession: "any",
  })
  async createPageSection(
    @graphql.Args() args: CreatePageSectionArgs
  ): Promise<PageSection> {
    return await this.service.createPageSection({
      ...args,
      data: {
        ...args.data,

        page: args.data.page
          ? {
              connect: args.data.page,
            }
          : undefined,

        Template: args.data.Template
          ? {
              connect: args.data.Template,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PageSection)
  @nestAccessControl.UseRoles({
    resource: "PageSection",
    action: "update",
    possession: "any",
  })
  async updatePageSection(
    @graphql.Args() args: UpdatePageSectionArgs
  ): Promise<PageSection | null> {
    try {
      return await this.service.updatePageSection({
        ...args,
        data: {
          ...args.data,

          page: args.data.page
            ? {
                connect: args.data.page,
              }
            : undefined,

          Template: args.data.Template
            ? {
                connect: args.data.Template,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PageSection)
  @nestAccessControl.UseRoles({
    resource: "PageSection",
    action: "delete",
    possession: "any",
  })
  async deletePageSection(
    @graphql.Args() args: DeletePageSectionArgs
  ): Promise<PageSection | null> {
    try {
      return await this.service.deletePageSection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Page, {
    nullable: true,
    name: "page",
  })
  @nestAccessControl.UseRoles({
    resource: "Page",
    action: "read",
    possession: "any",
  })
  async getPage(@graphql.Parent() parent: PageSection): Promise<Page | null> {
    const result = await this.service.getPage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SectionTemplate, {
    nullable: true,
    name: "template",
  })
  @nestAccessControl.UseRoles({
    resource: "SectionTemplate",
    action: "read",
    possession: "any",
  })
  async getTemplate(
    @graphql.Parent() parent: PageSection
  ): Promise<SectionTemplate | null> {
    const result = await this.service.getTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
