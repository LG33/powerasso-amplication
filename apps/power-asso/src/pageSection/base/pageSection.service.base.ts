/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PageSection, // @ts-ignore
  Page, // @ts-ignore
  SectionTemplate,
} from "@prisma/client";

export class PageSectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PageSectionCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageSectionCountArgs>
  ): Promise<number> {
    return this.prisma.pageSection.count(args);
  }

  async pageSections<T extends Prisma.PageSectionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageSectionFindManyArgs>
  ): Promise<PageSection[]> {
    return this.prisma.pageSection.findMany(args);
  }
  async pageSection<T extends Prisma.PageSectionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageSectionFindUniqueArgs>
  ): Promise<PageSection | null> {
    return this.prisma.pageSection.findUnique(args);
  }
  async createPageSection<T extends Prisma.PageSectionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageSectionCreateArgs>
  ): Promise<PageSection> {
    return this.prisma.pageSection.create<T>(args);
  }
  async updatePageSection<T extends Prisma.PageSectionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageSectionUpdateArgs>
  ): Promise<PageSection> {
    return this.prisma.pageSection.update<T>(args);
  }
  async deletePageSection<T extends Prisma.PageSectionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageSectionDeleteArgs>
  ): Promise<PageSection> {
    return this.prisma.pageSection.delete(args);
  }

  async getPage(parentId: string): Promise<Page | null> {
    return this.prisma.pageSection
      .findUnique({
        where: { id: parentId },
      })
      .page();
  }

  async getTemplate(parentId: string): Promise<SectionTemplate | null> {
    return this.prisma.pageSection
      .findUnique({
        where: { id: parentId },
      })
      .Template();
  }
}
